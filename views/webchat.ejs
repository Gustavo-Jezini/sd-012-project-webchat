<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Project WebChat</title>
  <script src="http://localhost:3000/socket.io/socket.io.js"></script>
</head>
<body>
  <h1>WebChat</h1>

  <h2>Usuários online</h2>
  <div id="divConnectedUsers">Usuários online:</div>

  <h2>Coloque seu apelido aqui:</h2>
  <form id="formNickname">
    <input id="inputNickname" data-testid="nickname-box" placeholder="Digite seu apelido aqui">
    <button data-testid="nickname-button">Mudar Apelido</button>
  </form>

  <section>
    <ul id="ulMessages">
      <% messages.forEach((message) => { %>
        <li data-testid="message"> <%= `${message.timestamp} - ${message.nickname}: ${message.message} `%> </li>
      <% }) %>
    </ul>
  </section>

  <form id="formMessages">
    <input id="inputMessage" autocomplete="off" data-testid="message-box">
    <button type="submit" data-testid="send-button">Enviar mensagem</button>
  </form>

  <script src="/socket.io/socket.io.js"></script>
  <script src="./js/webchat.js">
    // const socket = io();

    // const messagesList = document.querySelector('#messagesList');
    // const messageForm = document.querySelector('#messageForm');
    // const inputMsg = document.querySelector('#messageInput');
    // const nicknameInput = document.querySelector('#nicknameInput');
    // const nicknameForm = document.querySelector('#nicknameForm');
    // const onlineUsers = document.querySelector('#onlineUsers');

    // let allOnlineUsers = [];

    // messageForm.addEventListener('submit', (e) => {
    //   e.preventDefault();
    //   if (inputMsg.value) {
    //     const chatMessage = inputMsg.value;
    //     const { nickname } = findUserById(socket.id);
    //     socket.emit('message', { chatMessage, nickname });
    //     inputMsg.value = '';
    //   }
    // });

    // const findUserById = (id) => {
    //   const user = allOnlineUsers.find((u) => u.id === id);
    //   return user;
    // };

    // nicknameForm.addEventListener('submit', (e) => {
    //   e.preventDefault();
    //   const newNickname = nicknameInput.value;
    //   if (nicknameInput.value) {
    //     const updatedUser = { id: socket.id, nickname: newNickname };
    //     socket.emit('nickname', updatedUser)
    //   }
    //   nicknameInput.value = '';
    // });

    // function updateOnlineUsersList(array = []) {
    //   onlineUsers.textContent = '';
    //   array.forEach((user) => {
    //     const newUser = document.createElement('p');
    //     newUser.setAttribute('data-testid', 'online-user');
    //     newUser.setAttribute('socketId', user.id);
    //     newUser.innerText = user.nickname;
    //     if (user.id === socket.id) {
    //       onlineUsers.prepend(newUser);
    //       return;
    //     }
    //     onlineUsers.appendChild(newUser);
    //   });
    // }

    // socket.on('connectedUsers', (array) => {
    //   allOnlineUsers = array;
    //   updateOnlineUsersList(array);
    // });

    // const createMessage = (msg) => {
    //   const newMessage = document.createElement('li');
    //   newMessage.textContent = msg;
    //   newMessage.setAttribute('data-testid', 'message');
    //   newMessage.setAttribute('userSocketId', socket.id);
    //   messagesList.appendChild(newMessage);
    //   window.scrollTo(0, document.body.scrollHeight);
    // }

    // socket.on('message', (msg) => {
    //   createMessage(msg);
    // });

    // window.onbeforeunload = () => {
    //   socket.disconnect();
    // };
  </script>
</body>
</html>
