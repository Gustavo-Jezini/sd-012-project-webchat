<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="/socket.io/socket.io.js"></script>
  <title>WebChat</title>
</head>
<body>
  <h1>WebChat</h1>
  <div>
    <div>
      <div>
        <form id="userForm" action="">
          <input id="userInput" data-testid="nickname-box" />
          <button data-testid="nickname-button">Salvar</button>
        </form>
        <ul id="users">
          <% userList.forEach(user => { %>
            <li id="<%= user.name %>" name="user" data-testid="online-user"><%= user.name %></li>
          <% }) %>
        </ul>
      </div>
      <div>
        <ul id="messages">
          <% messageList.forEach(message => { %>
            <li data-testid="message" ><%= message %></li>
          <% }) %>
        </ul>
      </div>
    </div>
    <form id="messageForm" action="" >
      <input id="messageInput" data-testid="message-box" />
      <button data-testid="send-button" >Enviar</button>
    </form>
  </div>
  <script>
    const socket = io();
    const userForm = document.getElementById('userForm');
    const userInput = document.getElementById('userInput');
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    // String gerada com base no codigo encontrado em https://gist.github.com/6174/6062387
    let nickname = Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10);

    socket.emit('login', nickname)

    const createMessages = (text, list, id) => {
      const li = document.createElement('li');
      li.setAttribute('id', text)
      li.setAttribute('data-testid', id)
      const liText = document.createTextNode(`${text}`);
      li.appendChild(liText);
      document.getElementById(list).appendChild(li)
    }

    const createUsers = (text, list, id) => {
      const li = document.createElement('li');
      const user = document.getElementsByName("user")[0]
      li.setAttribute('id', text)
      li.setAttribute('data-testid', id)
      const liText = document.createTextNode(`${text}`);
      li.appendChild(liText);
      if(user) {
        document.getElementById(list).insertBefore(li, user)
      } else {
        document.getElementById(list).appendChild(li)
      }
    }

    const RemoveUser = (id) => {
      const ul = document.getElementById('users');
      const li = document.getElementById(id);
      ul.removeChild(li);
    }

    const updateUser = (id, newName) => {
      const li = document.getElementById(id);
      li.setAttribute('id', newName)
      li.innerText = `${newName}`;
    }

    userForm.addEventListener('submit', (e) => {
      e.preventDefault();
      nickname = userInput.value
      socket.emit('userLogin', userInput.value);
      userInput.value = '';
      return false;
    });

    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      socket.emit('message', {
        nickname,
        chatMessage: messageInput.value
      });
      messageInput.value = '';
      return false;
    });

    socket.on('serverLogin', (user) => { createUsers(user, 'users', 'online-user') });
    socket.on('message', (message) => { createMessages(message, 'messages', 'message') });
    socket.on('removeUser', (user) => { RemoveUser(user) });
    socket.on('updateLogin', ({ name, userName }) => { updateUser(name, userName) });
  </script>
</body>
</html>